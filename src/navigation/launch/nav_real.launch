<launch>
	
	<!-- params -->
	<!-- <param name="/use_sim_time" value="true"/>  -->

	<!-- Tfs -->	
	<include file ="$(find odometry)/launch/tf_publisher.launch" />

	<!-- node to convert PointCloud2 in LaserScan -->	<!-- os sensor name to change in launchfile -->
	<include file ="$(find ira_laser_tools)/launch/my_laserscan_virtualizer_real.launch" />


	<!-- launch the dynamic-rec controller -->
	<node pkg="navigation" type="controller" name="controller" output="screen" clear_params="true" />
	<!-- <node pkg="rqt_reconfigure" type="rqt_reconfigure" name="rqt_reconfigure"/> -->


	<!-- launch my odometry node -->
	<node pkg="odometry" type="rpm_converter" name="rpm_converter" output="screen"/>
	<node pkg="odometry" type="odometry" name="odometry" output="screen" >
		<rosparam file="$(find odometry)/cfg/odom_param.yaml" command="load" /> 
		<param name="storage" value="$(find navigation)/storage" />
	</node>
	
	
	<!-- node to filter the PointClouds with different policies -->	
	<node pkg="navigation" type="filter_node" name="filter_node" output="screen">
		<param name="sensor_topic_name" value="os_cloud_node" />
		<param name="storage" value="$(find navigation)/storage" />
	</node>


	<!-- handler -->
	<node pkg="navigation" type="real_handler" name="real_handler" output="screen" >
		<rosparam file="$(find navigation)/cfg/navigation_config.yaml" command="load" />
		<param name="end_row_server_name" value="parallel_line_navigation" />
		<param name="in_row_server_name" value="my_crawl_row" />
		<param name="turn_server_name" value="turn_action" />
		<param name="lidar_topic_name" value="os_cloud_node" />
		<param name="file_path" value="$(find navigation)/paths/path1.txt" />
		<param name="file_path" value="$(find navigation)/storage" />
	</node>


	<!-- actions -->

	<!-- in-row navigation, cone and end_of_row recognition-->			
	<include file ="$(find fre_row_navigation)/launch/my_crawl_row_real.launch" />

	<!-- turn action to rotate the robot of x angle at exit/entrance of a row -->
	 <include file ="$(find turn)/launch/turn.launch" />

	<!-- end-row navigation action for clusters/segments recognition -->
	<node pkg="end_row_navigation" name="parallel_line_navigation" type="parallel_line_navigation" output="screen">
		<param name="lidar_sensor" value="os_sensor"/>
		<param name="lidar_topic_name" value="/os_cloud_node"/>
		<param name="odom_topic" value="/my_odom"/>
		<param name="pcl_assembler_server_name" value="pcl_euclidean_dist"/>
		<param name="storage" value="$(find navigation)/storage" />
	</node>

	<!-- action for clustering identification in PointCloud2 -->
	<include file ="$(find pcl_assembler)/launch/cluster_real.launch" />

	<!-- Rviz node for visualization -->
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find navigation)/rviz/navigation_real.rviz" /> 

</launch>
